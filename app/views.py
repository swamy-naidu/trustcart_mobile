from django.contrib import messages
from django.http import JsonResponse, HttpResponse
from reportlab.pdfgen import canvas
from django.db.utils import IntegrityError
from django.db.models import Q
from django.shortcuts import render, redirect
from django.views.generic.base import View
import re
import random
from django.core.mail import send_mail
from trustcart import settings as se


from app.models import UsersDetailsModel,ProductsModel,MobilesModel,LaptopsModel,CamerasModel,TelivisionsModel,CartModel,OrdersModel,AddressModel,SavedCardsModel,GiftCardsModel,ReviewsModel,PersonalInformationModel

def homepage(request):
    result = request.session.get("idno", None)
    if result:
        res = UsersDetailsModel.objects.get(idno=result)
        return render(request, "homepage_login.html", {"user": res})
    else:
        return render(request, "homepage.html")


def register(request):
    name = request.POST["name"]
    gender = request.POST["gender"]
    email = request.POST["email"]
    mobile = request.POST["mobile"]
    password = request.POST["password"]

    # this is for autogenerated idno
    id = UsersDetailsModel.objects.values('idno')
    l = []
    for x in id:
        for y, z in x.items():
            l.append(z)
    m = max(l)
    mx = m + 1
    try:
        UsersDetailsModel(idno=mx,name=name,gender=gender,email=email,mobile_no=mobile,password=password).save()
        messages.success(request,"Registered Succesfully")
        return redirect('signup')

    except IntegrityError:
        messages.error(request, "Mobile No & Email must be unique")
        return redirect('signup')

def logincheck(request):
    email = request.POST["email"]
    password = request.POST["password"]

    try:
        result = UsersDetailsModel.objects.get(email=email,password=password)
        request.session["idno"] = result.idno
        return redirect("index")
    except UsersDetailsModel.DoesNotExist:
        messages.error(request,"Your username or password is incorrect")
        return redirect('login')

def logout(request):
    del request.session["idno"]
    return redirect("index")

def profile(request):
    idno = request.GET.get("idno")
    ressult = UsersDetailsModel.objects.get(idno=idno)
    return render(request,"view_profile.html",{"user":ressult,"edit":"no"})

def save(request):
    b = request.POST.get("b1")
    idno = request.POST.get("idno")
    name = request.POST.get("name")
    modelno = request.POST.get("modelno")
    ct = request.POST.get("category")
    d = {"idno":idno,"name":name,"modelno":modelno,"ct":ct}
    res = UsersDetailsModel.objects.get(idno=request.session.get("idno", None))
    if b == "add_to_cart":
        try:
            id = CartModel.objects.values('cart_id')
            l = []
            for x in id:
                for y, z in x.items():
                    l.append(z)
            m = max(l)
            mx = m + 1
            CartModel(idno=idno,name=name,model_no=modelno,category=ct,cart_id=mx).save()
            if ct == 'Mobiles':
                result = MobilesModel.objects.get(model_no_id=modelno)
                return render(request, "view_one_mobile_login.html",
                              {"mess": "Item added to cart successfully", "data": result, "user": res,"cart":"added"})
            elif ct == 'Laptops':
                result = LaptopsModel.objects.get(model_no_id=modelno)
                return render(request, "view_one_laptop_login.html",
                              {"mess": "Item added to cart successfully", "data": result, "user": res,"cart":"added"})
            elif ct == 'Cameras':
                result = CamerasModel.objects.get(model_no_id=modelno)
                return render(request, "view_one_laptop_login.html",
                              {"mess": "Item added to cart successfully", "data": result, "user": res, "cart": "added"})
            else:
                result = TelivisionsModel.objects.get(model_no_id=modelno)
                return render(request, "view_one_tv_login.html",
                              {"mess": "Item added to cart successfully", "data": result, "user": res, "cart": "added"})


        except IntegrityError:
            if ct == 'Mobiles':
                result = MobilesModel.objects.get(model_no_id=modelno)
                return render(request, "view_one_mobile_login.html",
                              {"mess": "Item already added to cart", "data": result, "user": res,"cart":"added"})
            elif ct == 'Laptops':
                result = LaptopsModel.objects.get(model_no_id=modelno)
                return render(request, "view_one_laptop_login.html",
                              {"mess": "Item already added to cart", "data": result, "user": res,"cart":"added"})
            elif ct == 'Cameras':
                result = CamerasModel.objects.get(model_no_id=modelno)
                return render(request, "view_one_camera_login.html",
                              {"mess": "Item already added to cart", "data": result, "user": res, "cart": "added"})

            else:
                result = TelivisionsModel.objects.get(model_no_id=modelno)
                return render(request, "view_one_tv_login.html",
                              {"mess": "Item already added to cart", "data": result, "user": res, "cart": "added"})

    else:
        ressult = UsersDetailsModel.objects.get(idno=idno)
        ad = AddressModel.objects.filter(idno=idno)
        return render(request,"buynow.html",{"data":d,"user":ressult,"add":ad})

class Cart(View):
    def get(self,request):
        result = request.session.get("idno", None)
        if result:
            user = UsersDetailsModel.objects.get(idno=result)
            cart = CartModel.objects.filter(idno=result)
            count = 0
            total = 0
            l = []
            for x in cart:
                count+=1
                if x.category == 'Mobiles':
                    res = MobilesModel.objects.get(model_no_id=x.model_no)
                    l.append(res)
                if x.category == 'Laptops':
                    res = LaptopsModel.objects.get(model_no_id=x.model_no)
                    l.append(res)
                if x.category == 'Cameras':
                    res = CamerasModel.objects.get(model_no_id=x.model_no)
                    l.append(res)
                if x.category == 'Tvs':
                    res = TelivisionsModel.objects.get(model_no_id=x.model_no)
                    l.append(res)
            for y in l:
                total+=y.price
            return render(request, "cart.html", {"data": l, "user": user,"count":count,"total":total})
        else:
            return redirect('login')


class Orders_a(View):
    def get(self,request):
        idno = request.GET.get("idno")
        result = UsersDetailsModel.objects.get(idno=idno)
        o = OrdersModel.objects.filter(idno=result.idno)
        count = 0
        for x in o:
            count+=1
        return render(request, "orders.html", { "user": result, "orders": o,"or":count})


class ViewAllMobiles(View):
    def get(self,request):
        brand = request.GET["brand"]
        result = request.session.get("idno", None)
        if result:
            res = UsersDetailsModel.objects.get(idno=result)
            result = MobilesModel.objects.filter(brand=brand)
            return render(request, "view_all_mobiles_login.html", {"data": result,"user":res})

        else:
            result = MobilesModel.objects.filter(brand=brand)
            return render(request,"view_all_mobiles.html",{"data":result})


class ViewOneMobile(View):
    def get(self,request):
        modelno = request.GET["modelno"]
        idno = request.session.get("idno", None)
        if idno:
            res = UsersDetailsModel.objects.get(idno=idno)
            result = MobilesModel.objects.get(model_no_id=modelno)
            qty = ProductsModel.objects.get(model_no=modelno)
            ca = CartModel.objects.filter(idno=idno,model_no=modelno)
            if ca:
                cart = "added"
            else:
                cart = None
            pr = ProductsModel.objects.get(model_no=modelno)
            if pr.quantity == 0:
                mes = 0
            else:
                mes = pr.quantity
            return render(request, "view_one_mobile_login.html", {"data": result,"user":res,"qty":qty.quantity,"cart":cart,"q":mes})

        else:
            result = MobilesModel.objects.get(model_no_id=modelno)
            qty = ProductsModel.objects.get(model_no=modelno)
            return render(request, "view_one_mobile.html", {"data": result,"qty":qty.quantity})

def pin(request):
    pin = request.GET.get("pin")
    if pin:
        result = re.findall(r"^[a-zA-Z]*$", pin)
        if result:
            if pin in ["hyderabad","banglore","delhi","mumbai","chennai","pune"]:
                message= {"message":"Delivery in 2 Days if Ordered Today"}
            else:
                message = {"message": "Enter correct City Name to check"}
        else:
            message = {"message": "Enter City Name to check"}
    else:
        message = {"message":"Enter City Name to check"}

    return JsonResponse(message)

class ViewAllLaptops(View):
    def get(self,request):
        brand = request.GET["brand"]
        result = request.session.get("idno", None)
        if result:
            res = UsersDetailsModel.objects.get(idno=result)
            result = LaptopsModel.objects.filter(brand=brand)
            return render(request, "view_all_laptops_login.html", {"data": result,"user":res})

        else:
            result = LaptopsModel.objects.filter(brand=brand)
            return render(request,"view_all_laptops.html",{"data":result})

class ViewOneLaptop(View):
    def get(self,request):
        modelno = request.GET["modelno"]
        idno = request.session.get("idno", None)
        if idno:
            res = UsersDetailsModel.objects.get(idno=idno)
            result = LaptopsModel.objects.get(model_no_id=modelno)
            qty = ProductsModel.objects.get(model_no=modelno)
            ca = CartModel.objects.filter(idno=idno, model_no=modelno)
            if ca:
                cart = "added"
            else:
                cart = None

            pr = ProductsModel.objects.get(model_no=modelno)
            if pr.quantity == 0:
                mes = 0
            else:
                mes = pr.quantity
            return render(request, "view_one_laptop_login.html", {"data": result,"user":res,"qty":qty.quantity,"cart":cart,"q":mes})

        else:
            result = LaptopsModel.objects.get(model_no_id=modelno)
            qty = ProductsModel.objects.get(model_no=modelno)
            return render(request, "view_one_laptop.html", {"data": result,"qty":qty.quantity})

class ViewAllCameras(View):
    def get(self,request):
        brand = request.GET["brand"]
        result = request.session.get("idno", None)
        if result:
            res = UsersDetailsModel.objects.get(idno=result)
            result = CamerasModel.objects.filter(brand=brand)
            return render(request, "view_all_cameras_login.html", {"data": result,"user":res})

        else:
            result = CamerasModel.objects.filter(brand=brand)
            return render(request,"view_all_cameras.html",{"data":result})

class ViewOneCamera(View):
    def get(self,request):
        modelno = request.GET["modelno"]
        idno = request.session.get("idno", None)
        if idno:
            res = UsersDetailsModel.objects.get(idno=idno)
            result = CamerasModel.objects.get(model_no_id=modelno)
            qty = ProductsModel.objects.get(model_no=modelno)
            ca = CartModel.objects.filter(idno=idno, model_no=modelno)
            if ca:
                cart = "added"
            else:
                cart = None
            pr = ProductsModel.objects.get(model_no=modelno)
            if pr.quantity == 0:
                mes = 0
            else:
                mes = pr.quantity
            return render(request, "view_one_camera_login.html", {"data": result,"user":res,"qty":qty.quantity,"cart":cart,"q":mes})

        else:
            result = CamerasModel.objects.get(model_no_id=modelno)
            qty = ProductsModel.objects.get(model_no=modelno)
            return render(request, "view_one_camera.html", {"data": result,"qty":qty.quantity})


class ViewAllTvs(View):
    def get(self,request):
        brand = request.GET["brand"]
        result = request.session.get("idno", None)
        if result:
            res = UsersDetailsModel.objects.get(idno=result)
            result = TelivisionsModel.objects.filter(brand=brand)
            return render(request, "view_all_tvs_login.html", {"data": result,"user":res})

        else:
            result = TelivisionsModel.objects.filter(brand=brand)
            return render(request,"view_all_tvs.html",{"data":result})

class ViewOneTv(View):
    def get(self,request):
        modelno = request.GET["modelno"]
        idno = request.session.get("idno", None)
        if idno:
            res = UsersDetailsModel.objects.get(idno=idno)
            result = TelivisionsModel.objects.get(model_no_id=modelno)
            qty = ProductsModel.objects.get(model_no=modelno)
            ca = CartModel.objects.filter(idno=idno, model_no=modelno)
            if ca:
                cart = "added"
            else:
                cart = None
            pr = ProductsModel.objects.get(model_no=modelno)
            if pr.quantity == 0:
                mes = 0
            else:
                mes = pr.quantity
            return render(request, "view_one_tv_login.html", {"data": result,"user":res,"qty":qty.quantity,"cart":cart,"q":mes})

        else:
            result = TelivisionsModel.objects.get(model_no_id=modelno)
            qty = ProductsModel.objects.get(model_no=modelno)
            return render(request, "view_one_tv.html", {"data": result,"qty":qty.quantity})

def profile_edit(request):
    idno = request.GET.get("idno")
    ressult = UsersDetailsModel.objects.get(idno=idno)
    return render(request, "view_profile.html", {"user": ressult,"edit":"yes"})


def giftcard(request):
    idno = request.GET.get("idno")
    ressult = UsersDetailsModel.objects.get(idno=idno)
    return render(request, "view_profile.html", {"user": ressult, "giftcard": "yes"})


def giftcard_save(request):
    idno = request.POST.get("idno")
    email = request.POST.get("email")
    name = request.POST.get("name")
    value = request.POST.get("price")
    message = request.POST.get("message")
    print(idno,email,name,value,message)
    subject = "TrustCart Gift Card"
    gift_no = random.randint(10000000,99999999)
    id = GiftCardsModel.objects.values('gift_id')
    l = []
    for x in id:
        for y, z in x.items():
            l.append(z)
    m = max(l)
    mx = m + 1
    GiftCardsModel(gift_id=mx, idno=idno, name=name, gift_card_no=gift_no, balance=value, reciever_email=email).save()
    ressult = UsersDetailsModel.objects.get(idno=idno)
    mes = "Hi  "+name+" \n "" \n"+ message +" \n This is your TrustCart Gift Card worth of   ₹ "+str(value)+" \n " " \n Your Gift Card Number is  ' "+str(gift_no)+" ' \n  Gift card PIN is "+str(mx)+" \n Enjoy the Gift and Keep Shopping Love form TrustCart."
    send_mail(subject,mes,se.EMAIL_HOST_USER,[email])

    return render(request, "view_profile.html", {"user": ressult, "giftcard": "yes","mes":"Gift Card purchased successfully and Gift Card sent to Reciver's Email ID"})

def update_user(request):
    idno = request.POST.get("idno")
    email = request.POST.get("email")
    name = request.POST.get("name")
    gender = request.POST.get("gender")
    mobile = request.POST.get("mobile")
    up = UsersDetailsModel.objects.filter(idno=idno).update(name=name,email=email,gender=gender,mobile_no=mobile)

    ressult = UsersDetailsModel.objects.get(idno=idno)
    return render(request, "view_profile.html",{"user": ressult, "edit": "no", "mes": "Information Updated successfully"})

def user_delete(request):
    idno = request.GET.get("idno")
    print(idno)
    UsersDetailsModel.objects.get(idno=idno).delete()
    del request.session["idno"]
    return redirect("index")

def add_address(request):
    idno = request.GET.get("idno")
    ressult = UsersDetailsModel.objects.get(idno=idno)
    return render(request, "view_profile.html", {"user": ressult, "address": "yes"})

def address(request):
    idno = request.session.get("idno",None)
    ressult = UsersDetailsModel.objects.get(idno=idno)
    ad = AddressModel.objects.filter(idno=idno)
    return render(request, "view_profile.html", {"user": ressult, "address": "no","data":ad})

def save_address(request):
    idno = request.POST.get("idno")
    name = request.POST.get("name")
    mobile = request.POST.get("mobile")
    pin = request.POST.get("pin")
    locality = request.POST.get("locality")
    address = request.POST.get("address")
    city = request.POST.get("city")
    state = request.POST.get("state")
    type = request.POST.get("type")

    id = AddressModel.objects.values('address_id')
    l = []
    for x in id:
        for y, z in x.items():
            l.append(z)
    m = max(l)
    mx = m + 1
    AddressModel(idno=idno,name=name,mobile=mobile,pin=pin,city=city,state=state,type=type,locality=locality,address=address,address_id=mx).save()
    ressult = UsersDetailsModel.objects.get(idno=idno)
    ad = AddressModel.objects.filter(idno=idno)
    return redirect('address')

def update_address(request):
    idno = request.POST.get("idno")
    add_id = request.POST.get("add_id")
    name = request.POST.get("name")
    mobile = request.POST.get("mobile")
    pin = request.POST.get("pin")
    locality = request.POST.get("locality")
    address = request.POST.get("address")
    city = request.POST.get("city")
    state = request.POST.get("state")
    type = request.POST.get("type")
    AddressModel.objects.filter(address_id=add_id).update(idno=idno,name=name,mobile=mobile,pin=pin,city=city,state=state,type=type,locality=locality,address=address)
    ressult = UsersDetailsModel.objects.get(idno=idno)
    ad = AddressModel.objects.filter(idno=idno)
    return redirect("address")

def edit_address(request):
    idno = request.GET.get("idno")
    add_id = request.GET.get("add_id")
    ad = AddressModel.objects.get(address_id=add_id)
    ressult = UsersDetailsModel.objects.get(idno=idno)
    return render(request, "view_profile.html", {"user": ressult, "address": "edit","data":ad})

def delete_address(request):
    idno = request.GET.get("idno")
    add_id = request.GET.get("add_id")
    ressult = UsersDetailsModel.objects.get(idno=idno)
    AddressModel.objects.get(address_id=add_id).delete()
    ad = AddressModel.objects.filter(idno=idno)
    return render(request, "view_profile.html", {"user": ressult, "address": "no", "data": ad})

def buynow_qty(request):
    idno = request.POST['idno']
    name = request.POST['name']
    modelno = request.POST['modelno']
    ct = request.POST['ct']
    add_id = request.POST['add_id']
    d = {"idno": idno, "name": name, "modelno": modelno, "ct": ct,"add_id":add_id}

    ressult = UsersDetailsModel.objects.get(idno=idno)
    ad = AddressModel.objects.get(address_id=add_id)
    pr = ProductsModel.objects.get(model_no=modelno)
    return render(request, "buynow_qty.html", {"data": d, "user": ressult, "x": ad,"qty":pr.quantity})


def order_summary(request):
    idno = request.POST['idno']
    name = request.POST['name']
    modelno = request.POST['modelno']
    ct = request.POST['ct']
    add_id = request.POST['add_id']
    qty = int(request.POST['qty'])
    d = {"idno": idno, "name": name, "modelno": modelno, "ct": ct, "add_id": add_id,"qty":qty}
    if ct == 'Mobiles':
        m = MobilesModel.objects.get(model_no=modelno)
        price = m.price
        total = m.price*qty
    if ct == 'Laptops':
        l = LaptopsModel.objects.get(model_no=modelno)
        price = l.price
        total = l.price * qty
    if ct == 'Cameras':
        c = CamerasModel.objects.get(model_no=modelno)
        price = c.price
        total = c.price * qty
    if ct == 'Tvs':
       t = TelivisionsModel.objects.get(model_no=modelno)
       price = t.price
       total = t.price * qty

    ressult = UsersDetailsModel.objects.get(idno=idno)
    ad = AddressModel.objects.get(address_id=add_id)
    return render(request, "buynow_total.html", {"data": d, "user": ressult, "x": ad,"total":total,"price":price})


def payments(request):
    idno = request.POST['idno']
    name = request.POST['name']
    modelno = request.POST['modelno']
    ct = request.POST['ct']
    add_id = request.POST['add_id']
    qty = int(request.POST['qty'])
    t = request.POST['total']
    price = request.POST['price']
    total = float(t)
    d = {"idno": idno, "name": name, "modelno": modelno, "ct": ct, "add_id": add_id, "qty": qty,"total":total}
    ressult = UsersDetailsModel.objects.get(idno=idno)
    ad = AddressModel.objects.get(address_id=add_id)
    s = SavedCardsModel.objects.filter(idno=idno)

    return render(request, "payments.html", {"price":price,"data": d, "user": ressult, "xy": ad,"data2":s,"total":total})


def savedcards(request):
    idno = request.GET.get("idno")
    c = SavedCardsModel.objects.filter(idno=idno)
    ressult = UsersDetailsModel.objects.get(idno=idno)
    return render(request, "view_profile.html", {"user": ressult, "cards":"no","data":c})


def add_card(request):
    idno = request.GET.get("idno")
    ressult = UsersDetailsModel.objects.get(idno=idno)
    return render(request, "view_profile.html", {"user": ressult, "cards": "yes"})


def card_save(request):
    idno = request.POST.get("idno")
    no = request.POST.get("number")
    mm = request.POST.get("mm")
    yy = request.POST.get("yy")
    name = request.POST.get("name")

    if len(no) == 16:
        id = SavedCardsModel.objects.values('card_id')
        l = []
        for x in id:
            for y, z in x.items():
                l.append(z)
        m = max(l)
        mx = m + 1
        SavedCardsModel(card_id=mx,idno=idno,card_no=no,name_on_card=name,expiry_mm=mm,expiry_yy=yy).save()
        c = SavedCardsModel.objects.filter(idno=idno)
        ressult = UsersDetailsModel.objects.get(idno=idno)
        return render(request, "view_profile.html",{"user": ressult, "cards": "no","data":c})

    else:
        ressult = UsersDetailsModel.objects.get(idno=idno)
        return render(request, "view_profile.html", {"user": ressult, "cards": "yes","mes":"Card Number must be 16 Digits"})


def delete_card(request):
    idno = request.GET.get("idno")
    card_id = request.GET.get("card_id")
    SavedCardsModel.objects.get(card_id=card_id).delete()
    c = SavedCardsModel.objects.filter(idno=idno)
    ressult = UsersDetailsModel.objects.get(idno=idno)
    return render(request, "view_profile.html", {"user": ressult, "cards": "no", "data": c})


def save_order(request):
    idno = request.POST['idno']
    name = request.POST['name']
    modelno = request.POST['modelno']
    ct = request.POST['ct']
    add_id = request.POST['add_id']
    qty = int(request.POST['qty'])
    total = request.POST['total']
    id = OrdersModel.objects.values('order_id')
    l = []
    for x in id:
        for y, z in x.items():
            l.append(z)
    m = max(l)
    mx = m + 1
    if ct == 'Mobiles':
        res = MobilesModel.objects.get(model_no_id=modelno)
    if ct == 'Laptops':
        res = LaptopsModel.objects.get(model_no_id=modelno)
    if ct == 'Cameras':
        res = CamerasModel.objects.get(model_no_id=modelno)
    if ct == 'Tvs':
        res = TelivisionsModel.objects.get(model_no_id=modelno)

    pr = ProductsModel.objects.get(model_no=modelno)
    q = pr.quantity-qty
    ProductsModel.objects.filter(model_no=modelno).update(quantity=q)

    ad = AddressModel.objects.get(address_id=add_id)
    OrdersModel(order_id=mx,idno=idno,name=name,model_no=modelno,category=ct,quantity=qty,total=total,address=ad.address,loaclity=ad.locality,city=ad.city,pin=ad.pin,state=ad.state,product_price=res.price,product_name=pr.name,photo=res.photo).save()
    d = {"idno": idno, "name": name, "modelno": modelno, "ct": ct, "add_id": add_id, "qty": qty, "total": total}
    ressult = UsersDetailsModel.objects.get(idno=idno)

    return render(request, "ordered.html", {"data": d, "user": ressult, "x": ad,"mes":"Order Placed Successfully"})


class RemoveCart(View):
    def get(self,request):
        idno = request.GET["idno"]
        modelno = request.GET["modelno"]
        CartModel.objects.filter(idno=idno,model_no=modelno).delete()
        return redirect("cart")


def invoice(request):
    o = request.POST["ord"]
    pr = OrdersModel.objects.get(order_id=o)
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename="TrustCart_invoice.pdf"'
    p = canvas.Canvas(response)
    p.setFont("Times-Roman", 30)
    p.drawCentredString(300, 800, text="TrustCart")
    p.setFont("Times-Roman", 18)
    p.drawString(40,770, "TAX INVOICE")
    p.line(30,760,580,760)
    p.setFont("Times-Roman", 16)
    p.drawString(40, 740, "Shipping Address")
    p.setFont("Times-Roman", 12)
    p.drawString(40, 720, pr.name+",")
    p.setFont("Times-Roman", 12)
    p.drawString(40, 705, pr.address+",")
    p.setFont("Times-Roman", 12)
    p.drawString(40, 690, pr.loaclity+",")
    p.setFont("Times-Roman", 12)
    p.drawString(40, 675, pr.city+" - "+str(pr.pin)+",")
    p.setFont("Times-Roman", 12)
    p.drawString(40, 660, pr.state)
    p.line(30, 650, 580, 650)
    p.line(30, 620, 580, 620)
    p.line(30, 650, 30, 500)
    p.line(580, 650,580,500)
    p.line(30, 500, 580, 500)
    p.line(30, 530, 580, 530)
    p.setFont("Times-Roman", 15)
    p.drawString(40, 630, "Product")
    p.setFont("Times-Roman", 12)
    p.drawString(40, 600, pr.product_name)
    p.setFont("Times-Roman", 15)
    p.drawString(200, 630, "QTY")
    p.setFont("Times-Roman", 12)
    p.drawString(200, 600, str(pr.quantity))
    p.setFont("Times-Roman", 15)
    p.drawString(250, 630, "Shipping Charge")
    p.setFont("Times-Roman", 12)
    p.drawString(280, 600, "0")
    p.setFont("Times-Roman", 15)
    p.drawString(380, 630, "Discount")
    p.setFont("Times-Roman", 12)
    p.drawString(380, 600, "0")
    p.setFont("Times-Roman", 15)
    p.drawString(500, 630, "Total")
    p.setFont("Times-Roman", 12)
    p.drawString(500, 600, str(pr.total))
    p.setFont("Times-Roman", 15)
    p.drawString(40, 510, "Total QTY : "+str(pr.quantity))
    p.setFont("Times-Roman", 15)
    p.drawString(450, 510, "Total Price : "+str(pr.total))
    p.setFont("Times-Roman", 15)
    p.drawString(450, 450, "Signature")
    p.setFont("Times-Roman", 15)
    p.drawString(420, 430, pr.name)
    p.setFont("Times-Roman", 15)
    p.drawString(40, 450, "Ordered Through")
    p.drawImage('app/static/images/trustcart_sm.jpg',50,400)
    p.showPage()
    p.save()
    return response

def giftcard_payment(request):
    idno = request.POST.get("idno")
    email = request.POST.get("email")
    name = request.POST.get("name")
    value = request.POST.get("value")
    message = request.POST.get("message")
    d = {"idno": idno, "name": name,"qty":1,"email":email,"price":value,"mes":message}
    ressult = UsersDetailsModel.objects.get(idno=idno)
    s = SavedCardsModel.objects.filter(idno=idno)
    return render(request, "gift_payments.html",
                  {"data": d, "user": ressult, "data2": s,})


def add_giftcard(request):
    idno = request.GET.get("idno")
    ressult = UsersDetailsModel.objects.get(idno=idno)
    return render(request, "view_profile.html", {"user": ressult, "giftcard": "no"})


def add_giftcard_account(request):
    idno = request.POST.get("idno")
    gift_no = request.POST.get("gift_no")
    gift_pin = request.POST.get("gift_pin")
    ressult = UsersDetailsModel.objects.get(idno=idno)
    try:
        gift = GiftCardsModel.objects.get(gift_card_no=gift_no,gift_id=gift_pin)
        amount = ressult.balance+gift.balance
        UsersDetailsModel.objects.filter(idno=idno).update(balance=amount)
        GiftCardsModel.objects.get(gift_id=gift.gift_id).delete()
        return render(request, "view_profile.html",{"user": ressult, "giftcard": "yes", "mes": "Gift Card successfully Added to Account"})

    except GiftCardsModel.DoesNotExist:
        return render(request, "view_profile.html", {"user": ressult, "giftcard": "yes","mes_error":"Gift Card Number and Gift Card PIN is Incorrect"})


class Search(View):
    def post(self,request):
        search = request.POST.get("search")
        if search:
            try:
                p = ProductsModel.objects.filter(Q(name__icontains=search))
                return render(request, "search.html", {"data": p})
            except ProductsModel.DoesNotExist:
                return render(request,"search.html",{"mes":" Sorry we couldn't find any matches for "})
        else:
            return render(request, "search.html", {"mes":"Enter something to search Products..."})


def about(request):
    result = request.session.get("idno", None)
    if result:
        ressult = UsersDetailsModel.objects.get(idno=result)
        return render(request, "about_us_login.html", {"user": ressult})
    else:
        return render(request, "about_us.html")